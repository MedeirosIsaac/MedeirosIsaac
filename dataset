library(dplyr)
library(Seurat)
library(patchwork)
library(ggplot2)

# Load the yuzwa_merged dataset
yuzwa.data11 <- read.table("~/Documentos/data/gse/GSM2861510_E115_All_Cells_DGE.txt.gz",
                        sep = "\t", header = TRUE, row.names = 1)
yuzwa.data13 <- read.table("~/Documentos/data/gse/GSM2861511_E135_All_Cells_DGE.txt.gz",
                          sep = "\t", header = TRUE, row.names = 1)
yuzwa.data17 <- read.table("~/Documentos/data/gse/GSM2861514_E175_All_Cells_DGE.txt.gz",
                          sep = "\t", header = TRUE, row.names = 1)

# Initialize the Seurat object with the raw (non-normalized data).
yuzwa.11 <- CreateSeuratObject(counts = yuzwa.data11, min.cells = 3, min.features = 200)
yuzwa.13 <- CreateSeuratObject(counts = yuzwa.data13, min.cells = 3, min.features = 200)
yuzwa.17 <- CreateSeuratObject(counts = yuzwa.data17, min.cells = 3, min.features = 200)

yuzwa.11@meta.data$timepoint = "E11"
yuzwa.13@meta.data$timepoint = "E13"
yuzwa.17@meta.data$timepoint = "E17"

View(yuzwa.11@meta.data)
View(yuzwa.13@meta.data)
View(yuzwa.17@meta.data)

# Unindo os três objetos Seurat, em dados paralelos
yuzwa_merged <- merge(yuzwa.11, y = c(yuzwa.13, yuzwa.17), 
                     add.cell.ids = c("E11", "E13", "E17"), 
                     project = "yuzwa_merged_Combined")

#Faz com que seja um unico dado 
yuzwa_merged <- JoinLayers(yuzwa_merged)

# Verificando o objeto combinado
yuzwa_merged
View(yuzwa_merged@meta.data)

# The [[ operator can add columns to object metadata. This is a great place to stash QC stats
yuzwa_merged[["percent.mt"]] <- PercentageFeatureSet(yuzwa_merged, pattern = "^mt-")

# Visualize QC metrics as a violin plot
VlnPlot(yuzwa_merged, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"),group.by = "timepoint", ncol = 3)

# FeatureScatter is typically used to visualize feature-feature relationships, but can be used
# for anything calculated by the object, i.e. columns in object metadata, PC scores etc.
plot1 <- FeatureScatter(yuzwa_merged, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(yuzwa_merged, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1 + plot2

yuzwa_merged <- subset(yuzwa_merged, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)

#Normalizes the feature expression measurements for each cell by the total expression, multiplies this by a scale factor (10,000 by default)
yuzwa_merged <- NormalizeData(yuzwa_merged, normalization.method = "LogNormalize", scale.factor = 10000)
yuzwa_merged <- NormalizeData(yuzwa_merged)

#Identification of highly variable features
yuzwa_merged <- FindVariableFeatures(yuzwa_merged, selection.method = "vst", nfeatures = 2000)

# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(yuzwa_merged), 10)

# plot variable features with and without labels
plot1 <- VariableFeaturePlot(yuzwa_merged)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
plot1 + plot2

#Apply a linear transformation (‘scaling’)
all.genes <- rownames(yuzwa_merged)
yuzwa_merged <- ScaleData(yuzwa_merged, features = all.genes)

#Seurat outputs a list of genes with the most positive and negative loadings,
#representing modules of genes that exhibit either correlation (or anti-correlation) across single-cells in the dataset.
yuzwa_merged <- RunPCA(yuzwa_merged, features = VariableFeatures(object = yuzwa_merged))

# Examine and visualize PCA results a few different ways
print(yuzwa_merged[["pca"]], dims = 1:5, nfeatures = 5)

VizDimLoadings(yuzwa_merged, dims = 1:2, reduction = "pca")

DimPlot(yuzwa_merged, reduction = "pca") + NoLegend()

#Allows for easy exploration of the primary sources of heterogeneity in a dataset[...]
DimHeatmap(yuzwa_merged, dims = 1, cells = 500, balanced = TRUE)

DimHeatmap(yuzwa_merged, dims = 1:15, cells = 500, balanced = TRUE)

#Determine the ‘dimensionality’ of the dataset
ElbowPlot(yuzwa_merged)

#Seurat applies a graph-based clustering approach, building upon initial strategies in.(Clouster the cells)
yuzwa_merged <- FindNeighbors(yuzwa_merged, dims = 1:10)
yuzwa_merged <- FindClusters(yuzwa_merged, resolution = 0.5)

# Look at cluster IDs of the first 5 cells
head(Idents(yuzwa_merged), 5)

#Run non-linear dimensional reduction
yuzwa_merged <- RunUMAP(yuzwa_merged, dims = 1:10)
# note that you can set `label = TRUE` or use the LabelClusters function to help label
# individual clusters
DimPlot(yuzwa_merged, reduction = "umap")
saveRDS(yuzwa_merged, file = "~/Documentos/data/gse/yuzwa_merged_tutorial.rds")

# find all markers of cluster 2
cluster2.markers <- FindMarkers(yuzwa_merged, ident.1 = 2)
head(cluster2.markers, n = 5)
# find all markers distinguishing cluster 5 from clusters 0 and 3
cluster5.markers <- FindMarkers(yuzwa_merged, ident.1 = 5, ident.2 = c(0, 3))
head(cluster5.markers, n = 5)

# find markers for every cluster compared to all remaining cells, report only the positive
# ones
yuzwa_merged.markers <- FindAllMarkers(yuzwa_merged, only.pos = TRUE)
yuzwa_merged.markers %>%
  group_by(cluster) %>%
  dplyr::filter(avg_log2FC > 1)

cluster0.markers <- FindMarkers(yuzwa_merged, ident.1 = 0, logfc.threshold = 0.25, test.use = "roc", only.pos = TRUE)
VlnPlot(yuzwa_merged, features = c("Emx1"))

# you can plot raw counts as well
VlnPlot(yuzwa_merged, features = c("Emx1"), slot = "counts", log = TRUE)

FeaturePlot(yuzwa_merged, features = c("Pax6", "Sox2", "Eomes", "Tubb3", "Tbr1")) & ylab("Merged")

yuzwa_merged.markers %>%
  group_by(cluster) %>%
  dplyr::filter(avg_log2FC > 1) %>%
  slice_head(n = 10) %>%
  ungroup() -> top10
DoHeatmap(yuzwa_merged, features = top10$gene) + NoLegend()

levels(yuzwa_merged)

#Assigning cell type identity to clusters
new.cluster.ids <- c("0", "1", "2", "3", "4", "5",
                     "6", "7", "8", "9", "10", "11")
names(new.cluster.ids) <- levels(yuzwa_merged)
yuzwa_merged <- RenameIdents(yuzwa_merged, new.cluster.ids)
DimPlot(yuzwa_merged, reduction = "umap", label = TRUE, pt.size = 0.5) + NoLegend()

plot <- DimPlot(yuzwa_merged, reduction = "umap", label = TRUE, label.size = 4.5) + xlab("UMAP 1") + ylab("UMAP 2") +
  theme(axis.title = element_text(size = 18), legend.text = element_text(size = 18)) + guides(colour = guide_legend(override.aes = list(size = 10)))
ggsave(filename = ".~/Documentos/data/gse/yuzwa_merged3k_umap.jpg", height = 7, width = 12, plot = plot, quality = 50)
'Y1saveRDS(yuzwa_merged, file = "~/Documentos/data/gse/yuzwa_merged.rds")
