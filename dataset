library(dplyr)
library(Seurat)
library(patchwork)
library(ggplot2)

setwd("~/Documentos/Yuzwa2017")

# Load the yuzwa_merged dataset
yuzwa.data11 <- read.table("gse/GSM2861510_E115_All_Cells_DGE.txt.gz",
                        sep = "\t", header = TRUE, row.names = 1)
yuzwa.data13 <- read.table("gse/GSM2861511_E135_All_Cells_DGE.txt.gz",
                          sep = "\t", header = TRUE, row.names = 1)
yuzwa.data17 <- read.table("gse/GSM2861514_E175_All_Cells_DGE.txt.gz",
                          sep = "\t", header = TRUE, row.names = 1)

# Initialize the Seurat object with the raw (non-normalized data).
yuzwa.11 <- CreateSeuratObject(counts = yuzwa.data11, min.cells = 3, min.features = 200)
yuzwa.13 <- CreateSeuratObject(counts = yuzwa.data13, min.cells = 3, min.features = 200)
yuzwa.17 <- CreateSeuratObject(counts = yuzwa.data17, min.cells = 3, min.features = 200)

yuzwa.11@meta.data$timepoint = "E11"
yuzwa.13@meta.data$timepoint = "E13"
yuzwa.17@meta.data$timepoint = "E17"

# Unindo os três objetos Seurat, em dados paralelos
yuzwa_merged <- merge(yuzwa.11, y = c(yuzwa.13, yuzwa.17), 
                     add.cell.ids = c("E11", "E13", "E17"), 
                     project = "yuzwa_merged_Combined")

#Faz com que seja um unico dado 
yuzwa_merged <- JoinLayers(yuzwa_merged)

# Verificando o objeto combinado
yuzwa_merged

# The [[ operator can add columns to object metadata. This is a great place to stash QC stats
yuzwa_merged[["percent.mt"]] <- PercentageFeatureSet(yuzwa_merged, pattern = "^mt-")

# Visualize QC metrics as a violin plot
VlnPlot(yuzwa_merged, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"),group.by = "timepoint", ncol = 3)

# FeatureScatter is typically used to visualize feature-feature relationships, but can be used
# for anything calculated by the object, i.e. columns in object metadata, PC scores etc.
plot1 <- FeatureScatter(yuzwa_merged, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(yuzwa_merged, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1 + plot2

yuzwa_merged <- subset(yuzwa_merged, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 10)

#Normalizes the feature expression measurements for each cell by the total expression, multiplies this by a scale factor (10,000 by default)
yuzwa_merged <- NormalizeData(yuzwa_merged, normalization.method = "LogNormalize", scale.factor = 10000)

#Identification of highly variable features
yuzwa_merged <- FindVariableFeatures(yuzwa_merged, selection.method = "vst", nfeatures = 2000)

# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(yuzwa_merged), 10)

# plot variable features with and without labels
plot1 <- VariableFeaturePlot(yuzwa_merged)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
plot1 + plot2

#Apply a linear transformation (‘scaling’)
all.genes <- rownames(yuzwa_merged)
yuzwa_merged <- ScaleData(yuzwa_merged, features = all.genes)

#Seurat outputs a list of genes with the most positive and negative loadings,
#representing modules of genes that exhibit either correlation (or anti-correlation) across single-cells in the dataset.
yuzwa_merged <- RunPCA(yuzwa_merged, features = VariableFeatures(object = yuzwa_merged))

# Examine and visualize PCA results a few different ways
print(yuzwa_merged[["pca"]], dims = 1:5, nfeatures = 5)

VizDimLoadings(yuzwa_merged, dims = 1:2, reduction = "pca")

DimPlot(yuzwa_merged, reduction = "pca")

#Allows for easy exploration of the primary sources of heterogeneity in a dataset[...]
DimHeatmap(yuzwa_merged, dims = 1, cells = 500, balanced = TRUE)

DimHeatmap(yuzwa_merged, dims = 1:15, cells = 500, balanced = TRUE)

#Determine the ‘dimensionality’ of the dataset
ElbowPlot(yuzwa_merged)

#Seurat applies a graph-based clustering approach, building upon initial strategies in.(Clouster the cells)
yuzwa_merged <- FindNeighbors(yuzwa_merged, dims = 1:10)
yuzwa_merged <- FindClusters(yuzwa_merged, resolution = 0.5)

# Look at cluster IDs of the first 5 cells
head(Idents(yuzwa_merged), 5)

#Run non-linear dimensional reduction
yuzwa_merged <- RunUMAP(yuzwa_merged, dims = 1:10)

# find markers for every cluster compared to all remaining cells, report only the positive
# ones
yuzwa_merged.markers <- FindAllMarkers(yuzwa_merged, only.pos = TRUE)
levels(yuzwa_merged)

#Inicio da observação e direcionamento;

VlnPlot(yuzwa_merged, features = c("Pax6", "Eomes", "Tubb3"))  
FeaturePlot(yuzwa_merged, features = c("Pax6", "Eomes", "Tubb3"), split.by = "timepoint")

VlnPlot(yuzwa_merged, features = c("Emx1", "Pax6"))

#encontrando os marcadores com maior avg_log2FC(magnitude da diferença de expressão)
top_markers <- yuzwa_merged.markers %>%
  group_by(cluster) %>%
  dplyr::filter(avg_log2FC > 1) %>%
  slice_max(avg_log2FC, n = 5) %>%
  arrange(cluster)

print(top_markers, n = Inf)
View(top_markers)

# Filtrar diretamente no top_markers
top_markers %>%
  filter(gene %in% c("Emx1", "Dlx1", "Gad1"))

# Média de expressão por cluster
avg_exp <- AggregateExpression(yuzwa_merged, features = c("Emx1", "Dlx1", "Gad1"))$RNA
print(avg_exp)

# UMAP com expressão
FeaturePlot(yuzwa_merged, features = c("Pax6", "Sox2", "Eomes", "Tubb3", "Tbr1"), label = TRUE)

Idents(yuzwa_merged) <- "seurat_clusters"  # caso não esteja ainda
genes <- c("Pax6", "Sox2", "Eomes", "Tubb3", "Tbr1")
cluster_pct <- sapply(genes, function(gene) {
  tapply(GetAssayData(yuzwa_merged, slot = "data")[gene, ] > 0, 
         Idents(yuzwa_merged), 
         mean) * 100
})

# Converte em tibble, observando a porcentagem de cada marcador nos clusters
as.data.frame(cluster_pct) %>%
  tibble::rownames_to_column("cluster")

# Gráfico de violino
VlnPlot(yuzwa_merged, features = c("Emx1", "Dlx1", "Gad1"), pt.size = 0.1)


DimPlot(yuzwa_merged, split.by = "timepoint", label = TRUE)  # Verifique se APs/IPs estão em E11-E13

FeaturePlot(yuzwa_merged, features = c("Emx1", "Gad1", "Dlx1")) | DimPlot(yuzwa_merged, label = TRUE)

FeaturePlot(yuzwa_merged, features = c("Pax6", "Eomes", "Tubb3", "Dlx1"), split.by = "timepoint", label = TRUE)

#Sessão emx1 positivo filtrado(caso precise)
yuzwa_emx1_positivo <- subset(
  yuzwa_merged, 
  subset = Emx1 > 0  # Limiar ajustável (ex.: > 0, > 0.5, > 1)
)

levels(Idents(yuzwa_emx1_positivo))
DimPlot(yuzwa_emx1_positivo, split.by = "timepoint", label = TRUE)  # Verifique se APs/IPs estão em E11-E13

FeaturePlot(yuzwa_emx1_positivo, features = c("Emx1", "Gad1", "Dlx1")) | DimPlot(yuzwa_emx1_positivo, label = TRUE)

# Verificação
VlnPlot(yuzwa_emx1_positivo, features = "Emx1")  # Só células positivas!

# Gráficos de violino ou UMAP para os marcadores
VlnPlot(yuzwa_emx1_positivo, features = c("Pax6", "Sox2", "Eomes", "Tubb3", "Tbr1"))
#comparando
FeaturePlot(yuzwa_merged, features = c("Pax6","Sox2", "Eomes", "Tubb3","Tbr1"))
FeaturePlot(yuzwa_emx1_positivo, features = c("Pax6", "Sox2", "Eomes", "Tubb3", "Tbr1"))
#fim da sessão

yuzwa_merged.markers %>%
  group_by(cluster) %>%
  dplyr::filter(avg_log2FC > 1) %>%
  slice_head(n = 10) %>%
  ungroup() -> top10

View(yuzwa_merged.markers)

DoHeatmap(yuzwa_merged, features = top10$gene) + NoLegend()
DoHeatmap(yuzwa_merged, features = c("Pax6", "Eomes", "Tubb3", "Sox2", "Tbr1"))

#Assigning cell type identity to clusters
new.cluster.ids <- c(
  "Non-neuronal",  # 0 (sem marcadores clássicos)
  "ENs",           # 1 (Sstr2+)
  "ENs",           # 2 (Npy2r+)
  "ENs",           # 3 (Rxrg+)
  "ENs",           # 4 (Lamp5+)
  "ENs",           # 5 (Th+)
  "Non-neuronal",  # 6
  "Non-neuronal",  # 7
  "Non-neuronal",  # 8
  "Non-neuronal",  # 9 (Cd34+)
  "Non-neuronal",  # 10
  "Non-neuronal",  # 11
  "Non-neuronal",  # 12 (Krt15+)
  "Microglia"      # 13 (Gpr34+)
)

names(new.cluster.ids) <- levels(yuzwa_merged)
yuzwa_merged_id <- RenameIdents(yuzwa_merged_id, new.cluster.ids)
DimPlot(yuzwa_merged_id, reduction = "umap", label = TRUE, pt.size = 0.5, split.by = "timepoint")

#saveRDS(yuzwa_merged, file = "~/Documentos/data/Yuzwa2017/gse/yuzwa_merged.rds")
DimPlot(yuzwa_merged_id, reduction = "umap")
#saveRDS(yuzwa_merged, file = "~/Documentos/data/Yuzwa2017/gse/database/yuzwa_merged_tutorial.rds")
